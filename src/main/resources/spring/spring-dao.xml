<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">

    <context:component-scan base-package="com.**.dao"/>

    <bean class="com.fanshr.step.config.split.EncryptPropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:jdbc.properties</value>
            </list>
        </property>
        <property name="fileEncoding" value="UTF-8"/>
        <property name="ignoreUnresolvablePlaceholders" value="true"/>
        <property name="ignoreResourceNotFound" value="true"/>
    </bean>


    <!-- 2.数据库连接池 -->
    <bean id="abstractDataSource"  abstract="true" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">


        <property name="maxActive" value="10"/>
        <property name="minIdle" value="5"/>

    </bean>
    <bean id="master" parent="abstractDataSource">
        <!-- 配置连接池属性 -->
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.master.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <bean id="slave" parent="abstractDataSource">
        <!-- 配置连接池属性 -->
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.slave.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>
    <!-- 配置动态数据源，targetDataSources 即路由数据源所对应的名称-->
    <bean id="dynamicDataSource" class="com.fanshr.step.config.split.DynamicDataSource">
        <property name="targetDataSources">
            <map>
                <entry value-ref="master" key="master"/>
                <entry value-ref="slave" key="slave"/>
            </map>
        </property>
    </bean>
    <bean id="dataSource" class="org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy">
        <property name="targetDataSource">
            <ref bean="dynamicDataSource"/>
        </property>
    </bean>

    <!--<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"-->
    <!--      destroy-method="close">-->
    <!--    <property name="driverClassName" value="${jdbc.driver}"/>-->
    <!--    <property name="url" value="${jdbc.master.url}"/>-->
    <!--    <property name="username" value="${jdbc.username}"/>-->
    <!--    <property name="password" value="${jdbc.password}"/>-->
    <!--    <property name="maxActive" value="10"/>-->
    <!--    <property name="minIdle" value="5"/>-->
    <!--</bean>-->

    <!--这里使用MP提供的sqlSessionFactory，完成了Spring与MP的整合-->
    <bean id="sqlSessionFactory"
          class="com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!-- 全局策略-->
        <property name="globalConfig" ref="globalConfig"/>

        <!-- 指定全局配置文件的位置 -->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>

        <!-- 透传 mybatis 配置,继承自Mybatis原生配置 -->
        <!--<property name="configuration" ref="configuration"/>-->


        <!--指定Mapper接口映射的xml文件位置-->
        <property name="mapperLocations" value="classpath*:**/dao/*.xml"/>

        <!--映射别名-->
        <property name="typeAliasesPackage" value="com.fanshr.step.**.entity"/>

        <!--插件配置-->
        <property name="plugins">
            <array>
                <ref bean="mybatisPlusInterceptor"/>
            </array>
        </property>


    </bean>


    <bean id="configuration" class="com.baomidou.mybatisplus.core.MybatisConfiguration">
        <!--驼峰命名映射-->
        <property name="mapUnderscoreToCamelCase" value="true"/>


        <!--<plugins>-->
        <!--    <plugin interceptor="com.fanshr.step.engine.common.dao.split.DynamicDataSourceInterceptor"/>-->
        <!--</plugins>-->


    </bean>


    <bean id="mybatisPlusInterceptor" class="com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor">
        <property name="interceptors">


            <list>
                <!--<ref bean="paginationInnerInterceptor"/>-->
                <!--注册分页插件-->
                <ref bean="paginationInnerInterceptor"/>
                <ref bean="optimisticLockerInnerInterceptor"/>
                <ref bean="blockAttackInnerInterceptor"/>

                <!--注册执行分析插件,生产环境不建议使用-->
                <!--<bean class="com.baomidou.mybatisplus.extension.plugins.SqlExplainInterceptor"/>-->
                <!--<!–<property name="properties" ref="">–>-->

                <!--<!–</property>–>-->
                <!--</bean>-->




            </list>
        </property>
    </bean>

    <bean id="paginationInnerInterceptor" class="com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor">
        <!-- 对于单一数据库类型来说,都建议配置该值,避免每次分页都去抓取数据库类型 -->

        <property name="dbType" value="MYSQL"/>
        <!--单页条数限制-->
        <property name="maxLimit" value="1000"/>
        <!--溢出总页数后，是否进行处理，默认不处理-->
        <property name="overflow" value="false"/>
    </bean>
    <!--乐观锁插件-->
    <bean id="optimisticLockerInnerInterceptor" class="com.baomidou.mybatisplus.extension.plugins.inner.OptimisticLockerInnerInterceptor"/>
    <!--防全表更新于删除插件-->
    <bean id="blockAttackInnerInterceptor" class="com.baomidou.mybatisplus.extension.plugins.inner.BlockAttackInnerInterceptor"/>
    <bean id="globalConfig" class="com.baomidou.mybatisplus.core.config.GlobalConfig">
        <!-- 控制台是否答应 字符logo图形-->
        <property name="banner" value="false"/>
        <!--sql全局注入-->
        <!--<property name="sqlInjector" ref="mySqlInjector"/>-->

        <!--元对象字段填充控制器-->
        <!--<property name="metaObjectHandler" ref=""/>-->

        <!--全局策略中的db策略配置-->
        <property name="dbConfig" ref="dbConfig"/>


    </bean>
    <bean id="dbConfig" class="com.baomidou.mybatisplus.core.config.GlobalConfig.DbConfig">
        <!-- 全局的主键策略 -->
        <property name="idType" value="AUTO"/>
        <!-- 全局的表前缀策略配置 -->
        <property name="tablePrefix" value="sys_"/>

        <!--全局的逻辑删除字段属性名-->
        <property name="logicDeleteField" value="version"/>
        <!--逻辑删除全局配值-->
        <!--未删除-->
        <property name="logicNotDeleteValue" value="0"/>
        <!--已删除-->
        <property name="logicDeleteValue" value="1"/>

        <!--<!–注入自定义全局操作–>-->

    </bean>

    <!--
    映射扫描,依然使用Mybatis原生的扫描器
    扫描所有的mapper接口的实现，将mapper接口代理自动注入到Spring
    base-package：指定mapper接口的包名
    -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 指定mapper接口所在包 -->
        <property name="basePackage" value="com.fanshr.step.**.dao"/>
        <!--指定sqlSessionFactoryBean配置在Spring中的id值-->
        <!--<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>-->
        <property name="sqlSessionFactoryBeanName">
            <idref bean="sqlSessionFactory"/>
        </property>
    </bean>
    <!--另一种方式，需要使用 mybatis-spring命名空间-->
    <!--<mybatis-spring:scan base-package="com.fanshr.case0101.dao"/>-->


    <!--配置一个可以进行批量执行的sqlSession  -->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"/>
        <constructor-arg name="executorType" value="BATCH"/>
    </bean>

</beans>